plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

//    def forgeOptions = publishOptions {
//        file = project.provider { project(":forge").tasks.remapJar }.flatMap { it.archiveFile }
//        displayName = "[FORGE][${minecraft_version}] ${project.name} ${mod_version}"
//        modLoaders.add("forge")
//    }

    def neoForge = publishOptions {
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "[NEOFORGE][${minecraft_version}] ${project.name} ${mod_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }
//
//    curseforge("curseforgeForge") {
//        from(curseForgeOptions, forgeOptions)
//    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoForge)
    }

    if (providers.environmentVariable("MODRINTH_TOKEN").getOrNull() != null) {
//        modrinth("modrinthForge") {
//            from(modrinthOptions, forgeOptions)
//        }

        modrinth("modrinthNeoforge") {
            from(modrinthOptions, neoForge)
        }
    }
}